from aiogram import Router
from aiogram.enums import ContentType
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from bot_src.utils.keyboards import share_number_keyboard, RemoveKeyboard
from bot_src.utils.states import RegistrationState
from database.crud.user_crud import UserCrud


urt = Router()


@urt.message(Command('start'), StateFilter(None))
async def start(msg: Message, state: FSMContext, session: AsyncSession):
    if UserCrud.get_filtered_by_params(session=session, telegram_id=str(msg.from_user.id)):
        await msg.answer('–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§ù')
    else:
        await UserCrud.create(session=session, telegram_id=str(msg.from_user.id))
        await msg.answer('–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è', reply_markup=share_number_keyboard())
        await state.set_state(RegistrationState.phone_request)


@urt.message(lambda msg: msg.content_type == ContentType.CONTACT, StateFilter(RegistrationState.phone_request))
async def get_phone(msg: Message, state: FSMContext, session: AsyncSession):
    contact = msg.contact.phone_number
    if contact[0] != '+':
        contact = '+' + contact

    await UserCrud.update_by_telegram_id(
        session=session,
        telegram_id=msg.from_user.id,
        phone=contact
    )

    await msg.answer('–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–µ –§–ò–û', reply_markup=RemoveKeyboard)
    await state.set_state(RegistrationState.fullname_request)


@urt.message(StateFilter(RegistrationState.fullname_request))
async def get_fullname(msg: Message, state: FSMContext, session: AsyncSession):
    fullname = msg.text.strip()

    if not msg.content_type != ContentType.TEXT or fullname or fullname.startswith('/'):
        await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º.')
        return

    await UserCrud.update_by_telegram_id(
        session=session,
        telegram_id=msg.from_user.id,
        full_name=fullname
    )

    await msg.answer('–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞')
    await state.set_state(RegistrationState.email_request)


@urt.message(StateFilter(RegistrationState.email_request))
async def get_email(msg: Message, state: FSMContext, session: AsyncSession):
    try:
        await UserCrud.update_by_telegram_id(
            session=session,
            telegram_id=msg.from_user.id,
            email=msg.text.strip()
        )

        await msg.answer('–°–ø–∞—Å–∏–±–æ, –æ—Å—Ç–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ')
        await state.set_state(RegistrationState.speciality_request)
    except IntegrityError as _ie:
        await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ email@example.com')


@urt.message(StateFilter(RegistrationState.speciality_request))
async def get_speciality(msg: Message, state: FSMContext, session: AsyncSession):
    speciality = msg.text.strip()

    if not msg.content_type != ContentType.TEXT or speciality or speciality.startswith('/'):
        await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–º.')
        return

    await UserCrud.update_by_telegram_id(
        session=session,
        telegram_id=msg.from_user.id,
        speciality=speciality
    )

    await msg.answer('–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ üî•')
    await state.clear()
