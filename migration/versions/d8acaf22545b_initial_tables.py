"""Initial tables

Revision ID: d8acaf22545b
Revises: 
Create Date: 2025-05-04 14:19:26.916953

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd8acaf22545b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('named_id', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('start_message', sa.Text(), nullable=False),
    sa.Column('end_message', sa.Text(), nullable=False),
    sa.Column('start_sticker', sa.Text(), nullable=True),
    sa.Column('end_sticker', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('named_id')
    )
    op.create_table('newsletters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('newsletter_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('telegram_id', sa.Text(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('newsletter_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['newsletter_id'], ['newsletters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_number', sa.Integer(), nullable=False),
    sa.Column('start_message', sa.Text(), nullable=False),
    sa.Column('end_message', sa.Text(), nullable=False),
    sa.Column('expected_answer', sa.Text(), nullable=True),
    sa.Column('answer_options', sa.Text(), nullable=True),
    sa.Column('start_attach', sa.Text(), nullable=True),
    sa.Column('end_attach', sa.Text(), nullable=True),
    sa.Column('end_sticker', sa.Text(), nullable=True),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('telegram_id', sa.Text(), nullable=False),
    sa.Column('role', sa.Enum('HADMIN', 'ADMIN', 'USER', name='user_role_enum'), nullable=False),
    sa.Column('full_name', sa.Text(), nullable=True),
    sa.Column('phone', sa.Text(), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('speciality', sa.Text(), nullable=True),
    sa.Column('cur_event_id', sa.UUID(), nullable=True),
    sa.Column('cur_stage_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("(email IS NULL OR email ~ '^[-a-zA-Z0-9_.]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$')", name='valid_email'),
    sa.CheckConstraint("(phone IS NULL OR phone ~ '^((\\+7|7|8)[0-9]{10})$')", name='valid_phone'),
    sa.ForeignKeyConstraint(['cur_event_id'], ['events.id'], ),
    sa.ForeignKeyConstraint(['cur_stage_id'], ['stages.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone')
    )
    op.create_index(op.f('ix_users_telegram_id'), 'users', ['telegram_id'], unique=True)
    op.create_table('user_stages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('answer_text', sa.Text(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('stage_id', sa.UUID(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_stages')
    op.drop_index(op.f('ix_users_telegram_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('stages')
    op.drop_table('newsletter_logs')
    op.drop_table('newsletters')
    op.drop_table('events')
    # ### end Alembic commands ###
