import uuid
from sqlalchemy import desc, select
from sqlalchemy.ext.asyncio import AsyncSession
from database.crud.base.factory import BaseCrudFactory
from database.models.models import Onboarding
from database.schemas.system_schemas import OnboardingCreate, OnboardingUpdate, OnboardingGet
from database.utils.moscow_datetime import datetime_now_moscow


class OnboardingCrud(
    BaseCrudFactory(
        model=Onboarding,
        create_schema=OnboardingCreate,
        update_schema=OnboardingUpdate,
        get_schema=OnboardingGet
    )
):
    @staticmethod
    async def get_last_onboarding(session: AsyncSession) -> OnboardingGet:
        default_onboarding = OnboardingGet(
            id=uuid.uuid4(),
            start_message_unauthorized='–ü—Ä–∏–≤–µ—Ç, –¥–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è',
            start_message_authorized='–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ü§ù',
            phone_request='–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            invalid_phone='–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ',
            fullname_request='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å —Ç–≤–æ–µ –§–ò–û',
            invalid_fullname='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º',
            email_request='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞',
            invalid_email='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ email@example.com',
            speciality_request='–°–ø–∞—Å–∏–±–æ, –æ—Å—Ç–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ',
            invalid_speciality='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–º',
            success_registration='–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üî•',
            created_at=datetime_now_moscow()
        )

        result = await session.execute(
            select(Onboarding)
            .order_by(desc(Onboarding.created_at))
            .limit(1)
        )
        onboarding = result.scalar_one_or_none()
        return OnboardingGet.model_validate(onboarding) if onboarding else default_onboarding
